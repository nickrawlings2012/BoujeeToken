pragma solidity 0.8.2;
// SPDX-License-Identifier: Unlicensed
contract Boujee{
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    uint public totalSupply  = 10000000 * 10 **18;
    string public name = "Boujee Token";
    string public symbol = "Boujee";
    uint public decimals = 18;

    //emit event so that external wallets can listen to these events

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);

    constructor() {
        balances[msg.sender] = totalSupply;
    }
        //returns the balance of Boujee Token owners 
    function balanceOf(address owner) public view returns(uint){
        return balances[owner];
    }
       //allow the transfer of Boujee Token between addresses 
    function transfer(address to, uint value) public returns(bool){
        require(balanceOf(msg.sender) >= value, 'Insufficient Balance');
        balances[to] += value;
        balances[msg.sender] -= value;
        emit Transfer(msg.sender, to, value);
        return true;
    }
        //function to execute delegated transfer
    
    function transferFrom(address from, address to, uint value) public returns(bool){
            require(balanceOf(from) >= value, 'Insufficient Balance');
            require(allowance[from][msg.sender] >= value, 'Allowance too low');
            balances[to] += value;
            balances[from] -= value;
            emit Transfer(from, to, value);
            return true;
    }

        //function to approve delegated transfer
    function approve(address spender, uint value) public returns(bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;

    }
}
